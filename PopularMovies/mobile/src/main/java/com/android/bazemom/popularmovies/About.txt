Copyright Â©2015. Barbara Bazemore Kiszka and Rock Solid Software. All Rights Reserved.
Permission to use, copy, modify, and distribute this software and its documentation for educational,
research, and not-for-profit purposes, without fee and without a signed licensing agreement,
is hereby granted, provided that the above copyright notice, this paragraph and the following two
paragraphs and dependent library licenses appear in all copies, modifications, and distributions.
Contact Barbara Bazemore Kiszka, BBKiszka@gmail.com, for commercial licensing opportunities.

IN NO EVENT SHALL BAZEMORE KISZKA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE
AND ITS DOCUMENTATION, EVEN IF BAZEMORE KISZKA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BAZEMORE KISZKA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE AND ACCOMPANYING
DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED "AS IS". BAZEMORE KISZKA HAS NO OBLIGATION TO
PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

-----------------------------------------------------------------------
Open Source notices
-----------------------------------------------------------------------
1. Google-gson is used under the Apache 2.0 license:
https://github.com/google/gson/blob/master/LICENSE

2. Otto is used under the Apache 2.0 license:
https://github.com/square/otto/blob/master/LICENSE.txt

3. Picasso is used under the Apache 2.0 license:
https://github.com/square/picasso/blob/master/LICENSE.txt

4. Retrofit is used under the Apache 2.0 license:
https://github.com/square/retrofit/blob/master/LICENSE.txt

5. The Movie Database API (TMDB) is used under these terms of use:
https://www.themoviedb.org/documentation/api/terms-of-use?language=en

-----------------------------------------------------------------------
Application: Popular Movies version 1

Purpose: Udacity Android Nanodegree project to get experience with:
* Build a UI layout for multiple Activities.
* Launch these Activities via Intent.
* Fetch data from themovieDB API

Author: Barbara Bazemore Kiszka, with borrowed bits attributed in the code

General design and dependencies:
    Display movie posters in a GridView in the main view using a traditional Model View Controller
    (MVC) pattern.  It requires Java SDK 1.7 and Android API 11 (Honeycomb) or better.

    Movie data is fetched from The Movie Database (TMDB, https://www.themoviedb.org/)
    in a RESTful manner using the Retrofit type-safe HTTP client for Android and Java,
    http://square.github.io/retrofit/.  Retrofit will do the fetch in a background task,
    convert the returned movie data from GSON to the MovieResults class,
    then callback to the UI in the main thread.  The Retrofit is implemented in MovieDBService.

    The Otto event bus, http://square.github.io/otto/, is used to efficiently
    communicate between the UI and other threads.  This is implemented in DispatchTMDB.

    Movie data is stored in the mMovieList ArrayList in the MainActivityFragment and is saved
    in the instance state so that the movie data does not need to be refetched when
    the View is torn down / rebuilt when switching between portrait and landscape view.

    To initialize the mMovieList the MainActivityFragment fetches a page of info containing
    about 20 movies by sending a LoadMovies event via Otto to the DispatchTMDB which
    calls TMDB in a background thread.  DispatchTMDB posts the MoviesLoaded event
    when the data arrives.  MainActivityFragment is subscribed to this event and
    updates the mMovieList and the UI when the Movie data arrives in the event.  Picasso
    is used to efficiently load the movie poster image into the UI View.

    The MainActivityFragment sends another LoadMovies event when the user scrolls within
    two screenfuls of the bottom of the list. The display can in theory hold up to 20,000
    movies.  There are some optimizations to keep from asking TMDB for the same page while
    it is still fetching it from the first request.

    Similarly the detail view shown when a movie poster is clicked fetches the movie
    detail data by sending a LoadMovieDetail event via Otto to the DispatchTMDB which
    calls TMDB in a background thread.  DispatchTMDB posts the MovieDetailLoaded event
    when the data arrives.  DetailActivityFragment is subscribed to this event and
    updates the UI when the MovieDetail data arrives in the event.

    If we were showing "popular" and the user switched to "top rated", the movies at the
    top of the top rated list may not be in the popular movies fetched so far, so a
    fresh set of the correct type of movies is requested.When the user asks for a different type
    of movie list: popular, top rated, or now playing;
    the mMovieList is cleared and a new LoadMovies event requesting page 1 is sent to
    DispatchTMDB via the bus to get that type of movie list from TMDB.

Build Note:
    You must add a file app.properties next to the ./mobile/build.gradle that contains the line:
    apiKEY=<your TMDB key #>

Future:
    The MoviesAvailable event is intended for better performance to fetch whatever is
    available / cached at the moment when the UI is first started.
    I did not fully implement this feature.

    The Image Quality setting basically works, however the gridview has a lot of empty space
    at the lower quality levels.  Since this was not required I decided not to finish this
    for v1.

    I did not implement: the tv build, favorites is coming in v2.

-----------------------------------------------------------------------


